import test from 'ava'

import * as lib from '../index'

const TEST_BITSTRINGS: lib.ASN1BitString[] = [
  {
    type: 'bitstring',
    value: Buffer.from(
      'xbjd90jjB56hh4ZJNd24wupOqpzfBq/ig+21XWs4SbQ=',
      'base64',
    ),
  },
  {
    type: 'bitstring',
    value: Buffer.from(
      'MEQCIE0pLrcPg7Q/dYNoqbjOOZPXY3xlRcNt4BnfJxxvyivTAiAa1f+5AsBAczwZLlrlNS2MFj83aXzEKJBTozquptZj',
      'base64',
    ),
  },
]

const TEST_BITSTRINGS_ASN1 = [
  new Uint8Array([
    0x03, 0x21, 0x00, 0xc5, 0xb8, 0xdd, 0xf7, 0x48, 0xe3, 0x07, 0x9e, 0xa1,
    0x87, 0x86, 0x49, 0x35, 0xdd, 0xb8, 0xc2, 0xea, 0x4e, 0xaa, 0x9c, 0xdf,
    0x06, 0xaf, 0xe2, 0x83, 0xed, 0xb5, 0x5d, 0x6b, 0x38, 0x49, 0xb4,
  ]).buffer,
  new Uint8Array([
    0x03, 0x46, 0x00, 0x30, 0x44, 0x02, 0x20, 0x4d, 0x29, 0x2e, 0xb7, 0x0f,
    0x83, 0xb4, 0x3f, 0x75, 0x83, 0x68, 0xa9, 0xb8, 0xce, 0x39, 0x93, 0xd7,
    0x63, 0x7c, 0x65, 0x45, 0xc3, 0x6d, 0xe0, 0x19, 0xdf, 0x27, 0x1c, 0x6f,
    0xca, 0x2b, 0xd3, 0x02, 0x20, 0x1a, 0xd5, 0xff, 0xb9, 0x02, 0xc0, 0x40,
    0x73, 0x3c, 0x19, 0x2e, 0x5a, 0xe5, 0x35, 0x2d, 0x8c, 0x16, 0x3f, 0x37,
    0x69, 0x7c, 0xc4, 0x28, 0x90, 0x53, 0xa3, 0x3a, 0xae, 0xa6, 0xd6, 0x63,
  ]).buffer,
]

test('JS ASN1BitString to ASN1 conversion', (t) => {
  TEST_BITSTRINGS.map((v, i) => {
    t.deepEqual(lib.JStoASN1(v).toBER(), TEST_BITSTRINGS_ASN1[i])
  })
})

test('ASN1 to Js ASN1BitString conversion from byte code', (t) => {
  TEST_BITSTRINGS_ASN1.map((v, i) => {
    const obj = new lib.ASN1Decoder(v)

    t.deepEqual(obj.intoBitString(), TEST_BITSTRINGS[i])
    t.deepEqual(lib.ASN1toJS(v), TEST_BITSTRINGS[i])
  })
})

test('ASN1 to ASN1BitString conversion from base64', (t) => {
  const obj = lib.ASN1Decoder.fromBase64('AwYAChAUIAk=')

  t.deepEqual(obj.intoBitString(), {
    type: 'bitstring',
    value: Buffer.from(new Uint8Array([0xa, 0x10, 20, 32, 9])),
  })
})

test('ASN1 to Js ASN1BitString conversion round trip', (t) => {
  TEST_BITSTRINGS_ASN1.map((v, i) => {
    const js = new lib.ASN1Decoder(v)

    t.deepEqual(js.intoBitString(), TEST_BITSTRINGS[i])
    t.deepEqual(lib.JStoASN1(lib.ASN1toJS(v)).toBER(), TEST_BITSTRINGS_ASN1[i])
  })
})
