
import test from 'ava';

import * as lib from '..';

const TEST_BITSTRINGS: lib.ASN1BitString[] = [
	{
		type: 'bitstring',
		value: Buffer.from(
			'MEQCIHmXWc+ASZ/3agYiWczwPR7JkRbJSAdL26s0/YPyHb0/AiBUOWxP9BGZG9oPX6LEaJ3WNQjqCF/Yk69p3x37srdqAA==',
			'base64',
		),
		unusedBits: 0,
	},
	{
		type: 'bitstring',
		value: Buffer.from(
			'MEQCIBP/1C6LRFzXPjPEadaeHh8okxc46rLNYf2G6xth4OsmAiBL/j9GOHrMMMCe2ddIVsl43UVEZdQsz+wqajCtR+F+AA==',
			'base64',
		),
		unusedBits: 0,
	},
	{
		type: 'bitstring',
		value: Buffer.from(
			'MEQCIHd0xqmKNBV76Rqp65DJjZMoWsv6Z5THAtyNqkKeYX6pAiAwWqVPgu7W8WIQHOI6JIDsfve1xPskMUIgu56TFFqitA==',
			'base64',
		),
		unusedBits: 0,
	},
	{
		type: 'bitstring',
		value: Buffer.from([0]),
		unusedBits: 7
	},
	{
		type: 'bitstring',
		value: Buffer.from('xbjd90jjB56hh4ZJNd24wupOqpzfBq/ig+21XWs4SbQ=', 'base64'),
		unusedBits: 0,
	}
]

const TEST_BITSTRINGS_ASN1 = [
	new Uint8Array([
		0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x79, 0x97, 0x59, 0xcf, 0x80,
		0x49, 0x9f, 0xf7, 0x6a, 0x06, 0x22, 0x59, 0xcc, 0xf0, 0x3d, 0x1e, 0xc9,
		0x91, 0x16, 0xc9, 0x48, 0x07, 0x4b, 0xdb, 0xab, 0x34, 0xfd, 0x83, 0xf2,
		0x1d, 0xbd, 0x3f, 0x02, 0x20, 0x54, 0x39, 0x6c, 0x4f, 0xf4, 0x11, 0x99,
		0x1b, 0xda, 0x0f, 0x5f, 0xa2, 0xc4, 0x68, 0x9d, 0xd6, 0x35, 0x08, 0xea,
		0x08, 0x5f, 0xd8, 0x93, 0xaf, 0x69, 0xdf, 0x1d, 0xfb, 0xb2, 0xb7, 0x6a,
		0x00,
	]).buffer,
	new Uint8Array([
		0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x13, 0xff, 0xd4, 0x2e, 0x8b,
		0x44, 0x5c, 0xd7, 0x3e, 0x33, 0xc4, 0x69, 0xd6, 0x9e, 0x1e, 0x1f, 0x28,
		0x93, 0x17, 0x38, 0xea, 0xb2, 0xcd, 0x61, 0xfd, 0x86, 0xeb, 0x1b, 0x61,
		0xe0, 0xeb, 0x26, 0x02, 0x20, 0x4b, 0xfe, 0x3f, 0x46, 0x38, 0x7a, 0xcc,
		0x30, 0xc0, 0x9e, 0xd9, 0xd7, 0x48, 0x56, 0xc9, 0x78, 0xdd, 0x45, 0x44,
		0x65, 0xd4, 0x2c, 0xcf, 0xec, 0x2a, 0x6a, 0x30, 0xad, 0x47, 0xe1, 0x7e,
		0x00,
	]).buffer,
	new Uint8Array([
		0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x77, 0x74, 0xc6, 0xa9, 0x8a,
		0x34, 0x15, 0x7b, 0xe9, 0x1a, 0xa9, 0xeb, 0x90, 0xc9, 0x8d, 0x93, 0x28,
		0x5a, 0xcb, 0xfa, 0x67, 0x94, 0xc7, 0x02, 0xdc, 0x8d, 0xaa, 0x42, 0x9e,
		0x61, 0x7e, 0xa9, 0x02, 0x20, 0x30, 0x5a, 0xa5, 0x4f, 0x82, 0xee, 0xd6,
		0xf1, 0x62, 0x10, 0x1c, 0xe2, 0x3a, 0x24, 0x80, 0xec, 0x7e, 0xf7, 0xb5,
		0xc4, 0xfb, 0x24, 0x31, 0x42, 0x20, 0xbb, 0x9e, 0x93, 0x14, 0x5a, 0xa2,
		0xb4,
	]).buffer,
	new Uint8Array([
		0x03, 0x02, 0x07, 0x00,
	]).buffer,
	new Uint8Array([
		0x03, 0x21, 0x00, 0xc5, 0xb8, 0xdd, 0xf7, 0x48, 0xe3, 0x07, 0x9e, 0xa1,
		0x87, 0x86, 0x49, 0x35, 0xdd, 0xb8, 0xc2, 0xea, 0x4e, 0xaa, 0x9c, 0xdf,
		0x06, 0xaf, 0xe2, 0x83, 0xed, 0xb5, 0x5d, 0x6b, 0x38, 0x49, 0xb4,
	]).buffer,
]
test('JS ASN1BitString to ASN1 conversion', (t) => {
	TEST_BITSTRINGS.forEach((v, i) => {
		t.deepEqual(lib.JStoASN1(v).toBER(), TEST_BITSTRINGS_ASN1[i])
	})
})

test('ASN1 to Js ASN1BitString conversion from byte code', (t) => {
	TEST_BITSTRINGS_ASN1.forEach((v, i) => {
		const obj = new lib.ASN1Decoder(v)

		t.deepEqual(obj.intoBitString(), TEST_BITSTRINGS[i])
		t.deepEqual(lib.ASN1toJS(v), TEST_BITSTRINGS[i])
	})
})

test('ASN1 to ASN1BitString conversion from base64', (t) => {
	const obj = lib.ASN1Decoder.fromBase64(
		'A0cAMEQCIHmXWc+ASZ/3agYiWczwPR7JkRbJSAdL26s0/YPyHb0/AiBUOWxP9BGZG9oPX6LEaJ3WNQjqCF/Yk69p3x37srdqAA==',
	)

	t.deepEqual(obj.intoBitString(), {
		type: 'bitstring',
		value: Buffer.from(
			new Uint8Array([
				0x30, 0x44, 0x02, 0x20, 0x79, 0x97, 0x59, 0xcf, 0x80, 0x49, 0x9f, 0xf7,
				0x6a, 0x06, 0x22, 0x59, 0xcc, 0xf0, 0x3d, 0x1e, 0xc9, 0x91, 0x16, 0xc9,
				0x48, 0x07, 0x4b, 0xdb, 0xab, 0x34, 0xfd, 0x83, 0xf2, 0x1d, 0xbd, 0x3f,
				0x02, 0x20, 0x54, 0x39, 0x6c, 0x4f, 0xf4, 0x11, 0x99, 0x1b, 0xda, 0x0f,
				0x5f, 0xa2, 0xc4, 0x68, 0x9d, 0xd6, 0x35, 0x08, 0xea, 0x08, 0x5f, 0xd8,
				0x93, 0xaf, 0x69, 0xdf, 0x1d, 0xfb, 0xb2, 0xb7, 0x6a, 0x00,
			]),
		),
		unusedBits: 0,
	})
})

test('ASN1 to Js ASN1BitString conversion round trip', (t) => {
	TEST_BITSTRINGS_ASN1.forEach((v, i) => {
		const js = new lib.ASN1Decoder(v)

		t.deepEqual(js.intoBitString(), TEST_BITSTRINGS[i])
		t.deepEqual(lib.JStoASN1(lib.ASN1toJS(v)).toBER(), TEST_BITSTRINGS_ASN1[i])
	})
})
