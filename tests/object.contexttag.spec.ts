import test from 'ava'

import * as lib from '..'

const TEST_CONTEXT_TAGS: lib.ASN1ContextTag[] = [
	{
		type: 'context',
		kind: 'explicit',
		value: 0,
		contains: [
			{ type: 'oid', oid: 'sha3-256' },
			[
				Buffer.from(
					new Uint8Array([
						0x2a, 0xff, 0x4b, 0x48, 0x22, 0x1b, 0xd1, 0x97, 0xd8, 0xc4, 0xcc,
						0xaf, 0x17, 0x37, 0x10, 0x81, 0xb2, 0xb3, 0x93, 0xc4, 0xf2, 0x3a,
						0xfc, 0xaf, 0x5f, 0x26, 0x23, 0x36, 0x76, 0xcd, 0x84, 0x3a,
					]),
				),
				Buffer.from(
					new Uint8Array([
						0x83, 0xa0, 0xcf, 0xb4, 0xd1, 0x53, 0xac, 0x34, 0xe5, 0xb2, 0x4b,
						0x4c, 0x74, 0xfd, 0x50, 0x80, 0x3c, 0x20, 0xb7, 0xa7, 0xa8, 0x82,
						0xdc, 0x94, 0xb0, 0x0d, 0xd4, 0xe9, 0x30, 0x7f, 0xf9, 0xaf,
					]),
				),
			],
		],
	},
	{ type: 'context', kind: 'explicit', value: 3, contains: 42n },
	{
		type: 'context',
		kind: 'explicit',
		value: 5,
		contains: [
			{
				type: 'set',
				name: { type: 'oid', oid: '2.15216.1.999' },
				value: 'Test',
			},
			100n,
		],
	},
	{ type: 'context', value: 3, kind: 'implicit', contains: new Uint8Array([0x01, 0x02, 0x03, 0x04]).buffer },
]

const TEST_CONTEXT_TAGS_ASN1 = [
	new Uint8Array([
		0xa0, 0x53, 0x30, 0x51, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03,
		0x04, 0x02, 0x08, 0x30, 0x44, 0x04, 0x20, 0x2a, 0xff, 0x4b, 0x48, 0x22,
		0x1b, 0xd1, 0x97, 0xd8, 0xc4, 0xcc, 0xaf, 0x17, 0x37, 0x10, 0x81, 0xb2,
		0xb3, 0x93, 0xc4, 0xf2, 0x3a, 0xfc, 0xaf, 0x5f, 0x26, 0x23, 0x36, 0x76,
		0xcd, 0x84, 0x3a, 0x04, 0x20, 0x83, 0xa0, 0xcf, 0xb4, 0xd1, 0x53, 0xac,
		0x34, 0xe5, 0xb2, 0x4b, 0x4c, 0x74, 0xfd, 0x50, 0x80, 0x3c, 0x20, 0xb7,
		0xa7, 0xa8, 0x82, 0xdc, 0x94, 0xb0, 0x0d, 0xd4, 0xe9, 0x30, 0x7f, 0xf9,
		0xaf,
	]).buffer,
	new Uint8Array([0xa3, 0x03, 0x02, 0x01, 0x2a]).buffer,
	new Uint8Array([
		0xa5, 0x16, 0x30, 0x14, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x05, 0xf7, 0x40,
		0x01, 0x87, 0x67, 0x13, 0x04, 0x54, 0x65, 0x73, 0x74, 0x02, 0x01, 0x64,
	]).buffer,
	new Uint8Array([0x83, 0x04, 0x01, 0x02, 0x03, 0x04]).buffer,
]

test('JS Context Tag to ASN1 conversion', (t) => {
	TEST_CONTEXT_TAGS.forEach((v, i) => {
		t.deepEqual(lib.JStoASN1(v).toBER(), TEST_CONTEXT_TAGS_ASN1[i])
	})
})

test('ASN1 to Js Context Tag conversion from byte code', (t) => {
	TEST_CONTEXT_TAGS_ASN1.forEach((v, i) => {
		const data = new Uint8Array(v)
		const obj = new lib.ASN1Decoder(Array.from(data))

		t.deepEqual(obj.intoContextTag(), TEST_CONTEXT_TAGS[i])
		t.deepEqual(lib.ASN1toJS(v), TEST_CONTEXT_TAGS[i])
	})
})

test('ASN1 to Js Context Tag conversion from base64', (t) => {
	const obj = lib.ASN1Decoder.fromBase64(
		'oFMwUQYJYIZIAWUDBAIIMEQEICr/S0giG9GX2MTMrxc3EIGys5PE8jr8r18mIzZ2zYQ6BCCDoM+00VOsNOWyS0x0/VCAPCC3p6iC3JSwDdTpMH/5rw==',
	)

	t.deepEqual(obj.intoContextTag(), TEST_CONTEXT_TAGS[0])
})

test('ASN1 to Js Context Tag conversion round trip', (t) => {
	TEST_CONTEXT_TAGS_ASN1.forEach((v, i) => {
		const js = new lib.ASN1Decoder(v)

		t.deepEqual(js.intoContextTag(), TEST_CONTEXT_TAGS[i])
		t.deepEqual(
			lib.JStoASN1(lib.ASN1toJS(v)).toBER(),
			TEST_CONTEXT_TAGS_ASN1[i],
		)
	})
})
