import b from 'benny';

import * as lib from '../target/LOCAL/index';
import { ASN1toJS, JStoASN1 } from '../utils/helpers';

async function run() {
  // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars
  const TEST_BLOCK_BASE64 =
    'MIHWAgEAAgIByAIBexgTMjAyMjA2MjIxODE4MDAuMjEwWgQiAALE/SPerrujysUeJZetilu60VeOZ29M3vyUsjGPdqagsgQguP6a3fMrNmLVzXptmUh0I8Otu5S3fX4PWWBDbWxEd+IwLDAqAgEABCIAA8GUaJ5YXCd7B46iRMLXMtmmPOW5v3MD2DK+so3K1BuRAgEKAkEA66ba0QK07zVrshYkOF3cOaW61T1ckn9QymeSBE+yE7EJPDnrN6g54KxBaAjRVFlT3iZe4qTtQfXRoCkhoCgzqg=='
  const TEST_BLOCK_ASN1 = new Uint8Array([
    0x30, 0x81, 0xd6, 0x02, 0x01, 0x00, 0x02, 0x02, 0x01, 0xc8, 0x02, 0x01,
    0x7b, 0x18, 0x13, 0x32, 0x30, 0x32, 0x32, 0x30, 0x36, 0x32, 0x32, 0x31,
    0x38, 0x31, 0x38, 0x30, 0x30, 0x2e, 0x32, 0x31, 0x30, 0x5a, 0x04, 0x22,
    0x00, 0x02, 0xc4, 0xfd, 0x23, 0xde, 0xae, 0xbb, 0xa3, 0xca, 0xc5, 0x1e,
    0x25, 0x97, 0xad, 0x8a, 0x5b, 0xba, 0xd1, 0x57, 0x8e, 0x67, 0x6f, 0x4c,
    0xde, 0xfc, 0x94, 0xb2, 0x31, 0x8f, 0x76, 0xa6, 0xa0, 0xb2, 0x04, 0x20,
    0xb8, 0xfe, 0x9a, 0xdd, 0xf3, 0x2b, 0x36, 0x62, 0xd5, 0xcd, 0x7a, 0x6d,
    0x99, 0x48, 0x74, 0x23, 0xc3, 0xad, 0xbb, 0x94, 0xb7, 0x7d, 0x7e, 0x0f,
    0x59, 0x60, 0x43, 0x6d, 0x6c, 0x44, 0x77, 0xe2, 0x30, 0x2c, 0x30, 0x2a,
    0x02, 0x01, 0x00, 0x04, 0x22, 0x00, 0x03, 0xc1, 0x94, 0x68, 0x9e, 0x58,
    0x5c, 0x27, 0x7b, 0x07, 0x8e, 0xa2, 0x44, 0xc2, 0xd7, 0x32, 0xd9, 0xa6,
    0x3c, 0xe5, 0xb9, 0xbf, 0x73, 0x03, 0xd8, 0x32, 0xbe, 0xb2, 0x8d, 0xca,
    0xd4, 0x1b, 0x91, 0x02, 0x01, 0x0a, 0x02, 0x41, 0x00, 0xeb, 0xa6, 0xda,
    0xd1, 0x02, 0xb4, 0xef, 0x35, 0x6b, 0xb2, 0x16, 0x24, 0x38, 0x5d, 0xdc,
    0x39, 0xa5, 0xba, 0xd5, 0x3d, 0x5c, 0x92, 0x7f, 0x50, 0xca, 0x67, 0x92,
    0x04, 0x4f, 0xb2, 0x13, 0xb1, 0x09, 0x3c, 0x39, 0xeb, 0x37, 0xa8, 0x39,
    0xe0, 0xac, 0x41, 0x68, 0x08, 0xd1, 0x54, 0x59, 0x53, 0xde, 0x26, 0x5e,
    0xe2, 0xa4, 0xed, 0x41, 0xf5, 0xd1, 0xa0, 0x29, 0x21, 0xa0, 0x28, 0x33,
    0xaa,
  ]).buffer

  const TEST_DATA = [
    BigInt(-1),
    BigInt(-0xffffff),
    BigInt(-0x7fffff),
    BigInt(0),
    BigInt(0x7f),
    BigInt(0x80),
    BigInt(
      '0x8bcbbf49c554d3f1b26e39005546b9f5910a12c5a61dc4cff707367a548264c2',
    ),
    { type: 'oid', oid: '1.2.3.4' } as lib.ASN1OID,
    { type: 'context', value: 3, contains: 42n } as lib.ASN1ContextTag,
    {
      type: 'bitstring',
      value: Buffer.from(
        'xbjd90jjB56hh4ZJNd24wupOqpzfBq/ig+21XWs4SbQ=',
        'base64',
      ),
    } as lib.ASN1BitString,
    {
      type: 'set',
      name: { type: 'oid', oid: '2.15216.1.999' },
      value: 'Test',
    } as lib.ASN1Set,
    Buffer.from('This is a Test String!\uD83D\uDE03'),
    'This is a Test String!',
    'This is a Test String!\uD83D\uDE03',
    new Date(0),
    new Date('2022-09-26T10:10:32.420+00:00'),
    new Date(),
    true,
    false,
    null,
    {
      type: 'context',
      value: 5,
      contains: [
        {
          type: 'set',
          name: { type: 'oid', oid: '2.15216.1.999' },
          value: 'Test',
        },
        100n,
      ],
    } as lib.ASN1ContextTag,
  ]

  await b.suite(
    'Encode/Decode Block from Buffer',

    b.add('Rust ASN1toJS - JStoASN1 Test Block', () => {
      lib.JStoASN1(lib.ASN1toJS(TEST_BLOCK_ASN1)).toBER()
    }),

    b.add('JavaScript ASN1toJS - JStoASN1 Test Block', () => {
      JStoASN1(ASN1toJS(TEST_BLOCK_ASN1)).toBER()
    }),

    b.cycle(),
    b.complete(),
  )

  await b.suite(
    'Encode/Decode Test Data',

    b.add('Rust JStoASN1 - ASN1toJS Test Sequence', () => {
      lib.ASN1toJS(lib.JStoASN1(TEST_DATA).toBER())
    }),

    b.add('JavaScript JStoASN1 - ASN1toJS Test Sequence', () => {
      ASN1toJS(JStoASN1(TEST_DATA).toBER())
    }),

    b.cycle(),
    b.complete(),
  )

  await b.suite(
    'Encode/Decode Block from Base64',

    b.add('Rust ASN1toJS Test Block', () => {
      const asn1 = lib.ASN1Decoder.fromBase64(TEST_BLOCK_BASE64)
      asn1.intoArray()
    }),

    b.add('JavaScript ASN1toJS Test Block', () => {
      const buffer = Uint8Array.from(
        Buffer.from(TEST_BLOCK_BASE64, 'base64'),
      ).buffer
      ASN1toJS(buffer)
    }),

    b.cycle(),
    b.complete(),
  )
}

run().catch((e) => {
  console.error(e)
})
