name: CI
env:
  DEBUG: napi:*
  APP_NAME: asn1-napi-rs
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  release:
    types: [created]
  pull_request:
    branches: [main]
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-apple-darwin
            host: macos-latest
            docker: false
            useZig: false
            build: |
              set -xe
              rustup target add x86_64-apple-darwin
              make all
              strip -x *.node
    name: Build - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 18
          check-latest: true
          cache: npm
      - name: Install NodeJS Dependencies
        run: make node_modules
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cargo/registry/index/
            ${{ github.workspace }}/.cargo/registry/cache/
            ${{ github.workspace }}/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Build
        if: ${{ !matrix.settings.docker }}
        run: ${{ matrix.settings.build }}
        shell: bash
        env:
          CARGO_HOME: ${{ github.workspace }}/.cargo
      - name: Upload Index Artifacts
        if: ${{ matrix.settings.target == 'x86_64-apple-darwin' }}
        uses: actions/upload-artifact@v4
        with:
          name: indexjs
          path: index.*
          if-no-files-found: error
          retention-days: 1
      - name: Upload Node Module Artifact
        uses: actions/upload-artifact@v4
        with:
          name: napi-module-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
          retention-days: 1
  test:
    name: Test - ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ["18","20"]
        settings:
          - target: x86_64-apple-darwin
            host: macos-latest
            docker: false
            qemu: false
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: npm
      - name: Setup NPM
        if: ${{ matrix.settings.npmConfig }}
        run: ${{ matrix.settings.npmConfig }}
      - name: Install NodeJS Dependencies
        run: make node_modules
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: indexjs
          path: .
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: napi-module-${{ matrix.settings.target }}
          path: .
      - name: List Artifacts
        run: ls -l *.node index.js index.d.ts
        shell: bash
      - name: Set up QEMU
        if: ${{ matrix.settings.qemu }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.settings.qemuPlatform }}
      - name: Setup Docker QEMU daemon
        if: ${{ matrix.settings.qemu }}
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Test Module in Docker with QEMU
        if: ${{ matrix.settings.qemu }}
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-${{ matrix.settings.dockerVariant }}
          options: '--platform ${{ matrix.settings.qemuDockerPlatform }} -v ${{ github.workspace }}:/build -w /build'
          run: set -e && make do-test-no-dep-build
      - name: Test Module (No Docker, No QEMU)
        if: ${{ matrix.settings.docker }} != true && ${{ matrix.settings.qemu }} != true
        run: make do-test-no-dep-build
      - name: Test Module (Docker, No QEMU)
        if: ${{ matrix.settings.docker }} == true && ${{ matrix.settings.qemu }} != true
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-${{ matrix.settings.dockerVariant }} make do-test-no-dep-build
  publish:
    name: Publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'release' && github.event.action == 'created'
    needs:
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 18
          check-latest: true
          cache: npm
      - name: Install NodeJS Dependencies
        run: make node_modules
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Move artifacts
        run: npm run napi artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Package release
        run: |
          set -ex
          make -j index.js index.d.ts
          cp -rf artifacts/*/*.node ./
          rm -rf artifacts
          rm -rf npm
      - name: Configure NPM Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo '//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}' >> .npmrc
          npm config set "@keetapay:registry=https://npm.pkg.github.com"
          npm config set -- '//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}'
      - name: Publish
        run: make do-npm-publish
