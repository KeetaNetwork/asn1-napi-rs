##################################
# DO NOT EDIT THIS FILE DIRECTLY #
##################################

name: CI
env:
  DEBUG: napi:*
  APP_NAME: asn1-napi-rs
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  release:
    types: [created]
  pull_request:
    branches: [main]
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-apple-darwin
            host: macos-latest
            qemu: false
            nodejsArch: 'x64'
            docker: false
            useZig: false
            build: |
              set -xe
              rustup target add x86_64-apple-darwin
              make all NAPI_LOCAL_BUILD_ARGS='--target x86_64-apple-darwin'
              strip -x *.node
              make test
          - target: x86_64-unknown-linux-gnu
            host: ubuntu-latest
            qemu: false
            nodejsArch: 'x64'
            docker: true
            dockerImage: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            useZig: false
            build: |
              set -xe
              rustup target add x86_64-unknown-linux-gnu
              make all NAPI_LOCAL_BUILD_ARGS='--target x86_64-unknown-linux-gnu'
              strip *.node
              make test
          - target: x86_64-unknown-linux-musl
            host: ubuntu-latest
            qemu: false
            nodejsArch: 'x64'
            docker: true
            dockerImage: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            useZig: false
            build: |
              set -xe
              rustup target add x86_64-unknown-linux-musl
              make all NAPI_LOCAL_BUILD_ARGS='--target x86_64-unknown-linux-musl'
              strip *.node
              make test
          - target: aarch64-apple-darwin
            host: macos-latest
            qemu: false
            nodejsArch: 'arm64'
            docker: false
            useZig: false
            build: |
              set -xe
              rustup target add aarch64-apple-darwin
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
              export CC=$(xcrun -f clang)
              export CXX=$(xcrun -f clang++)
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path)
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT"
              make all NAPI_LOCAL_BUILD_ARGS='--target aarch64-apple-darwin'
              strip -x *.node
              make test
          - target: aarch64-unknown-linux-musl
            host: ubuntu-latest-arm64-m
            qemu: false
            nodejsArch: 'arm64'
            docker: true
            dockerImage: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            useZig: false
            build: |
              set -xe
              rustup target add aarch64-unknown-linux-musl
              rustup target add aarch64-unknown-linux-musl
              make all NAPI_LOCAL_BUILD_ARGS='--target aarch64-unknown-linux-musl'
              /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip *.node
              make test
          - target: aarch64-unknown-linux-gnu
            host: ubuntu-latest-arm64-m
            qemu: false
            nodejsArch: 'arm64'
            docker: true
            dockerImage: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            useZig: false
            build: |
              set -xe
              rustup target add aarch64-unknown-linux-gnu
              make all NAPI_LOCAL_BUILD_ARGS='--target aarch64-unknown-linux-gnu'
              aarch64-unknown-linux-gnu-strip *.node
              make test
          - target: armv7-unknown-linux-gnueabihf
            host: ubuntu-latest
            qemu: false
            nodejsArch: ''
            docker: false
            useZig: true
            setup: |
              set -xe
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: |
              set -xe
              rustup target add armv7-unknown-linux-gnueabihf
              make all NAPI_LOCAL_BUILD_ARGS='--target armv7-unknown-linux-gnueabihf'
              arm-linux-gnueabihf-strip *.node
          - target: aarch64-linux-android
            host: ubuntu-latest
            qemu: false
            nodejsArch: ''
            docker: false
            useZig: false
            build: |
              set -xe
              rustup target add aarch64-linux-android
              make all NAPI_LOCAL_BUILD_ARGS='--target aarch64-linux-android'
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
          - target: armv7-linux-androideabi
            host: ubuntu-latest
            qemu: false
            nodejsArch: ''
            docker: false
            useZig: false
            build: |
              set -xe
              rustup target add armv7-linux-androideabi
              make all NAPI_LOCAL_BUILD_ARGS='--target armv7-linux-androideabi'
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
    name: Build - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup NodeJS
        if: matrix.settings.docker != true && matrix.settings.qemu != true
        uses: actions/setup-node@v4
        with:
          node-version: 18
          check-latest: true
          cache: npm
          architecture: ${{ matrix.settings.nodejsArch }}
      - name: Install NodeJS Dependencies
        if: matrix.settings.docker != true && matrix.settings.qemu != true
        run: make node_modules
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cargo/registry/index/
            ${{ github.workspace }}/.cargo/registry/cache/
            ${{ github.workspace }}/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Setup Zig
        if: matrix.settings.useZig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.10.1
      - name: Setup toolchain
        if: matrix.settings.setup != ''
        run: ${{ matrix.settings.setup }}
        shell: bash
      - name: Build in Docker
        if: matrix.settings.docker
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.settings.dockerImage }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build --platform ${{ matrix.settings.dockerPlatform }}'
          run: make node_modules && ${{ matrix.settings.build }}
          shell: bash
        env:
          CARGO_HOME: /usr/local/cargo
      - name: Build
        if: matrix.settings.docker != true
        run: ${{ matrix.settings.build }}
        shell: bash
        env:
          CARGO_HOME: ${{ github.workspace }}/.cargo
      - name: Upload Index Artifacts
        if: matrix.settings.target == 'x86_64-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: indexjs
          path: index.*
          if-no-files-found: error
          retention-days: 1
      - name: Upload Node Module Artifact
        uses: actions/upload-artifact@v4
        with:
          name: napi-module-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
          retention-days: 1
  test:
    name: Test - ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ["18","20"]
        settings:
          - target: x86_64-apple-darwin
            host: macos-latest
            nodejsArch: 'x64'
            docker: false
            qemu: false
          - target: x86_64-unknown-linux-gnu
            host: ubuntu-latest
            nodejsArch: 'x64'
            docker: true
            dockerVariant: slim
            dockerPlatform: linux/amd64
            qemu: false
          - target: x86_64-unknown-linux-musl
            host: ubuntu-latest
            nodejsArch: 'x64'
            docker: true
            dockerVariant: alpine
            dockerPlatform: linux/amd64
            npmConfig: |
              npm config set supportedArchitectures:libc musl
            qemu: false
          - target: aarch64-apple-darwin
            host: macos-latest
            nodejsArch: 'arm64'
            docker: false
            qemu: false
          - target: aarch64-unknown-linux-musl
            host: ubuntu-latest-arm64-m
            nodejsArch: 'arm64'
            docker: true
            dockerVariant: alpine
            dockerPlatform: linux/arm64
            npmConfig: |
              npm config set supportedArchitectures:libc glibc
              npm config set supportedArchitectures:cpu arm64
            qemu: false
          - target: aarch64-unknown-linux-gnu
            host: ubuntu-latest-arm64-m
            nodejsArch: 'arm64'
            docker: true
            dockerVariant: slim
            dockerPlatform: linux/arm64
            npmConfig: |
              npm config set supportedArchitectures:libc glibc
              npm config set supportedArchitectures:cpu arm64
            qemu: false
          - target: armv7-unknown-linux-gnueabihf
            host: ubuntu-latest
            nodejsArch: ''
            docker: false
            dockerVariant: bullseye-slim
            npmConfig: |
              npm config set supportedArchitectures:libc glibc
              npm config set supportedArchitectures:cpu arm
            qemu: true
            qemuPlatform: arm
            qemuDockerPlatform: linux/arm/v7
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup NodeJS
        if: matrix.settings.docker != true && matrix.settings.qemu != true
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: npm
          architecture: ${{ matrix.settings.nodejsArch }}
      - name: Setup NPM
        if: matrix.settings.npmConfig != '' && matrix.settings.docker != true && matrix.settings.qemu != true
        run: ${{ matrix.settings.npmConfig }}
      - name: Install NodeJS Dependencies
        if: matrix.settings.docker != true && matrix.settings.qemu != true
        run: make node_modules
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: indexjs
          path: .
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: napi-module-${{ matrix.settings.target }}
          path: .
      - name: List Artifacts
        run: ls -l *.node index.js index.d.ts
        shell: bash
      - name: Set up QEMU
        if: matrix.settings.qemu
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.settings.qemuPlatform }}
      - name: Setup Docker QEMU daemon
        if: matrix.settings.qemu
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Test Module in Docker with QEMU
        if: matrix.settings.qemu
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-${{ matrix.settings.dockerVariant }}
          options: '--platform ${{ matrix.settings.qemuDockerPlatform }} -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            ( (apt update && apt install -y make) || ( apk add make ) )
            ${{ matrix.settings.npmConfig }}
            make do-test-no-dep-build
      - name: Test Module (No Docker, No QEMU)
        if: matrix.settings.docker != true && matrix.settings.qemu != true
        run: set -e && make do-test-no-dep-build
      - name: Test Module in Docker without QEMU
        if: matrix.settings.docker == true && matrix.settings.qemu != true
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-${{ matrix.settings.dockerVariant }}
          options: '-v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            ( (apt update && apt install -y make) || ( apk add make ) )
            ${{ matrix.settings.npmConfig }}
            make do-test-no-dep-build
  publish:
    name: Publish
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup NodeJS
        if: matrix.settings.docker != true && matrix.settings.qemu != true
        uses: actions/setup-node@v4
        with:
          node-version: 18
          check-latest: true
          cache: npm
          architecture: ${{ matrix.settings.nodejsArch }}
      - name: Install NodeJS Dependencies
        if: matrix.settings.docker != true && matrix.settings.qemu != true
        run: make node_modules
      - name: Download artifacts (IndexJS)
        uses: actions/download-artifact@v4
        with:
          name: indexjs
          path: .
      - name: Download artifacts (aarch64-apple-darwin)
        uses: actions/download-artifact@v4
        with:
          name: napi-module-aarch64-apple-darwin
          path: .
      - name: Download artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: napi-module-x86_64-unknown-linux-gnu
          path: .
      - name: Download artifacts (x86_64-unknown-linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: napi-module-x86_64-unknown-linux-musl
          path: .
      - name: Download artifacts (aarch64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: napi-module-aarch64-unknown-linux-gnu
          path: .
      - name: Download artifacts (aarch64-unknown-linux-musl)
        uses: actions/download-artifact@v4
        with:
          name: napi-module-aarch64-unknown-linux-musl
          path: .
      - name: Configure NPM Publish
        run: |
          echo '//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}' >> .npmrc
          npm config set "@keetanetwork:registry=https://npm.pkg.github.com"
          npm config set "@keetapay:registry=https://npm.pkg.github.com"
          npm config set -- '//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}'
      - name: Publish
        run: make do-npm-publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
