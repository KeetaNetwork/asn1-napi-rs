name: CI
env:
  DEBUG: napi:*
  APP_NAME: asn1-napi-rs
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  release:
    types: [created]
  pull_request:
    branches: [main]
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-apple-darwin
            host: macos-latest
            build: |
              set -xe
              rustup target add x86_64-apple-darwin
              make all
              strip -x *.node
          - target: x86_64-pc-windows-msvc
            host: windows-latest
            build: |
              set -xe
              rustup target add x86_64-pc-windows-msvc
              make all
          - target: i686-pc-windows-msvc
            host: windows-latest
            build: |
              set -xe
              rustup target add i686-pc-windows-msvc
              make all NAPI_LOCAL_BUILD_ARGS='--target i686-pc-windows-msvc'
          - target: x86_64-unknown-linux-gnu
            host: ubuntu-latest
            docker: true
            dockerImage: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |
              set -xe
              rustup target add x86_64-unknown-linux-gnu
              make all NAPI_LOCAL_BUILD_ARGS='--target x86_64-unknown-linux-gnu'
              strip *.node
          - target: x86_64-unknown-linux-musl
            host: ubuntu-latest
            docker: true
            dockerImage: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              set -xe
              rustup target add x86_64-unknown-linux-musl
              make all NAPI_LOCAL_BUILD_ARGS='--target x86_64-unknown-linux-musl'
              strip *.node
          - target: aarch64-apple-darwin
            host: macos-latest
            build: |
              set -xe
              rustup target add aarch64-apple-darwin
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
              export CC=$(xcrun -f clang)
              export CXX=$(xcrun -f clang++)
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path)
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT"
              make all NAPI_LOCAL_BUILD_ARGS='--target aarch64-apple-darwin'
              strip -x *.node
          - target: aarch64-unknown-linux-gnu
            host: ubuntu-latest
            docker: true
            dockerImage: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |
              set -xe
              rustup target add aarch64-unknown-linux-gnu
              make all NAPI_LOCAL_BUILD_ARGS='--target aarch64-unknown-linux-gnu'
              aarch64-unknown-linux-gnu-strip *.node
          - target: armv7-unknown-linux-gnueabihf
            host: ubuntu-latest
            useZig: true
            setup: |
              set -xe
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: |
              set -xe
              rustup target add armv7-unknown-linux-gnueabihf
              make all NAPI_LOCAL_BUILD_ARGS='--target armv7-unknown-linux-gnueabihf'
              arm-linux-gnueabihf-strip *.node
          - target: aarch64-linux-android
            host: ubuntu-latest
            build: |
              set -xe
              rustup target add aarch64-linux-android
              make all NAPI_LOCAL_BUILD_ARGS='--target aarch64-linux-android'
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
          - target: armv7-linux-androideabi
            host: ubuntu-latest
            build: |
              set -xe
              rustup target add armv7-linux-androideabi
              make all NAPI_LOCAL_BUILD_ARGS='--target armv7-linux-androideabi'
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
          - target: aarch64-unknown-linux-musl
            host: ubuntu-latest
            docker: true
            dockerImage: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              set -xe
              rustup target add aarch64-unknown-linux-musl
              rustup target add aarch64-unknown-linux-musl
              make all NAPI_LOCAL_BUILD_ARGS='--target aarch64-unknown-linux-musl'
              /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip *.node
          - target: aarch64-pc-windows-msvc
            host: windows-latest
            build: |
              set -xe
              rustup target add aarch64-pc-windows-msvc
              make all NAPI_LOCAL_BUILD_ARGS='--target aarch64-pc-windows-msvc'
    name: Build - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: npm
      - name: Setup NodeJS x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: npm
          architecture: x86
      - name: Install NodeJS Dependencies
        run: make node_modules
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cargo/registry/index/
            ${{ github.workspace }}/.cargo/registry/cache/
            ${{ github.workspace }}/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Setup Zig
        if: ${{ matrix.settings.useZig }}
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.10.1
      - name: Setup toolchain
        if: ${{ matrix.settings.setup }}
        run: ${{ matrix.settings.setup }}
        shell: bash
      - name: Build in Docker
        if: ${{ matrix.settings.docker }}
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.settings.dockerImage }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}
          shell: bash
        env:
          CARGO_HOME: /usr/local/cargo
      - name: Build
        if: ${{ !matrix.settings.docker }}
        run: ${{ matrix.settings.build }}
        shell: bash
        env:
          CARGO_HOME: ${{ github.workspace }}/.cargo
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test:
    name: Test - ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ["18","20"]
        settings:
          - target: x86_64-apple-darwin
            host: macos-latest
          - target: x86_64-pc-windows-msvc
            host: windows-latest
          - target: i686-pc-windows-msvc
            host: windows-latest
          - target: x86_64-unknown-linux-gnu
            host: ubuntu-latest
            docker: true
            dockerVariant: slim
          - target: x86_64-unknown-linux-musl
            host: ubuntu-latest
            docker: true
            dockerVariant: alpine
            npmConfig: |
              npm config set supportedArchitectures.libc musl
          - target: aarch64-apple-darwin
            host: macos-latest
          - target: aarch64-unknown-linux-gnu
            host: ubuntu-latest
            docker: true
            dockerVariant: slim
            npmConfig: |
              npm config set supportedArchitectures.libc glibc
              npm config set supportedArchitectures.cpu arm64
            qemu: true
            qemuPlatform: arm64
            qemuDockerPlatform: linux/arm64
          - target: armv7-unknown-linux-gnueabihf
            host: ubuntu-latest
            npmConfig: |
              npm config set supportedArchitectures.libc glibc
              npm config set supportedArchitectures.cpu arm
            qemu: true
            qemuPlatform: arm
            qemuDockerPlatform: linux/arm/v7
          - target: aarch64-linux-android
            host: ubuntu-latest
          - target: armv7-linux-androideabi
            host: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            host: ubuntu-latest
            docker: true
            dockerVariant: alpine
            npmConfig: |
              npm config set supportedArchitectures.libc glibc
              npm config set supportedArchitectures.cpu arm64
            qemu: true
            qemuPlatform: arm64
            qemuDockerPlatform: linux/arm64
          - target: aarch64-pc-windows-msvc
            host: windows-latest
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: npm
      - name: Setup NodeJS x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: npm
          architecture: x86
      - name: Setup NPM
        if: ${{ matrix.settings.npmConfig }}
        run: ${{ matrix.settings.npmConfig }}
      - name: Install NodeJS Dependencies
        run: make node_modules
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List Artifacts
        run: ls -l *.node index.js index.d.ts
        shell: bash
      - name: Set up QEMU
        if: ${{ matrix.settings.qemu }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.settings.qemuPlatform }}
      - name: Setup Docker QEMU daemon
        if: ${{ matrix.settings.qemu }}
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Test bindings in Docker with QEMU
        if: ${{ matrix.settings.qemu }}
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-${{ matrix.settings.dockerVariant }}
          options: '--platform ${{ matrix.settings.qemuDockerPlatform }} -v ${{ github.workspace }}:/build -w /build'
          run: set -e && make test
      - name: Test bindings
        if: ${{ !matrix.settings.docker }} && ${{ !matrix.settings.qemu }}
        run: make test
      - name: Test bindings in Docker
        if: ${{ matrix.settings.docker }} && ${{ !matrix.settings.qemu }}
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-${{ matrix.settings.dockerVariant }} make test
  publish:
    name: Publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'release' && github.event.action == 'created'
    needs:
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: npm
      - name: Install NodeJS Dependencies
        run: make node_modules
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Move artifacts
        run: npm run napi artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Package release
        run: |
          set -ex
          make -j index.js index.d.ts
          cp -rf artifacts/*/*.node ./
          rm -rf artifacts
          rm -rf npm
      - name: Configure NPM Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo '//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}' >> .npmrc
          npm config set "@keetapay:registry=https://npm.pkg.github.com"
          npm config set -- '//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}'
      - name: Publish
        run: make do-npm-publish
